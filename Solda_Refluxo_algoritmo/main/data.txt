#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "driver/spi_master.h"
#include "soc/gpio_struct.h"
#include "driver/gpio.h"
#include "freertos/event_groups.h"

#include "rele.h"
#include "max6675.h"

#define D_BIT BIT0
#define L_BIT BIT1
#define CONTROL_BIT BIT2

spi_device_handle_t spi;
//int estado = 1;
int setpoint = 70;
int current_time, PID_ERROR, temp, PREV_ERROR = 0 ;
float kp = 1.5;
float ki = 0.0269;
float kd = 33.45;
float PID_P,PID_I, PID_D , PID_Output = 0;
EventGroupHandle_t LD_event_group;


void control_pwm(void *pvParameters)
{
  
    
    while (1)
    {
      xEventGroupWaitBits(
      LD_event_group,               //EventGroup q vai esperar
      CONTROL_BIT ,                  //Bits q está esperando a mudanca
      pdTRUE,                       //Os bits vai ser limpos dps de lidos      
      pdFALSE,                      //pdFALSE é igual a "or",ou seja, espera qualquer um dos dois para continuar  
      portMAX_DELAY                 //tempo para esperar os dois bits dps q o primeiro é ativado   
      );

    //Calculate PID
    PREV_ERROR = PID_ERROR;
    PID_ERROR = setpoint - temp;
    PID_P = kp*PID_ERROR;
    PID_I = PID_I+(ki*PID_ERROR);      
    PID_D = kd * (PID_ERROR-PREV_ERROR);
    PID_Output = PID_P + PID_I + PID_D;
    printf("PID_Output: %f \n",PID_Output);
    rele_d_altera(PID_Output);
    
    }
}


/*
void oscila_D(void *pvParameters)
{
    
    while (1)
    {
      xEventGroupWaitBits(
      LD_event_group,               //EventGroup q vai esperar
      D_BIT ,                  //Bits q está esperando a mudanca
      pdTRUE,                       //Os bits vai ser limpos dps de lidos      
      pdFALSE,                      //pdFALSE é igual a "or",ou seja, espera qualquer um dos dois para continuar  
      portMAX_DELAY                 //tempo para esperar os dois bits dps q o primeiro é ativado   
      );

      rele_d_altera(0);
      estado = 0;  
    }
}

void oscila_L(void *pvParameters)
{
    
    while (1)
    {
      xEventGroupWaitBits(
      LD_event_group,               //EventGroup q vai esperar
      L_BIT ,                       //Bits q está esperando a mudanca
      pdTRUE,                       //Os bits vai ser limpos dps de lidos      
      pdFALSE,                      //pdFALSE é igual a "or",ou seja, espera qualquer um dos dois para continuar  
      portMAX_DELAY                 //tempo para esperar os dois bits dps q o primeiro é ativado   
      );
      
      rele_d_altera(0.5);
      
    }
}
*/
/**
 * @brief Realiza a leitura da temperatura e imprime seu valor em celsius
 *  rawtemp
 * @param pvParameters 
 */
void task_read_temp(void *pvParameters)
{
    printf("Começou...\n");

    while (1)
    {
        temp = readMax6675(spi);
        /*Imprime a temperatura lida em Celsius*/
        printf("%d\n", temp);
        //current_time = esp_timer_get_time(); // obtem o tempo atual em microssegundos
        //printf("Tempo atual: %f ms\n", current_time/1000);
        xEventGroupSetBits(LD_event_group, CONTROL_BIT);

      /*
        if(temp>setpoint && estado == 1)
        {
          xEventGroupSetBits(LD_event_group, D_BIT);
        }
        else if(temp<setpoint && estado ==0)
        {
          xEventGroupSetBits(LD_event_group, L_BIT);
        }
      */  
    }
}
   
void app_main() {
  
  /*Inicializa o MAX6675 e o barramento SPI*/
  max6675_set();
  rele_pwm_set();
  rele_d_altera(0);

  
  LD_event_group = xEventGroupCreate();
  //xEventGroupClearBits(LD_event_group, L_BIT);
  //xEventGroupClearBits(LD_event_group, D_BIT);
  xEventGroupClearBits(LD_event_group, CONTROL_BIT);

  /*Cria uma tarefa para ler a temperatura*/
  xTaskCreate(task_read_temp, "read_temp", 2048, NULL, 5, NULL); 
  //xTaskCreate(oscila_L, "oscila_L", configMINIMAL_STACK_SIZE * 3, NULL, 4, NULL);
  //xTaskCreate(oscila_D, "oscila_D", configMINIMAL_STACK_SIZE * 3, NULL, 3, NULL);

  xTaskCreate(control_pwm, "control_pwm", configMINIMAL_STACK_SIZE * 3, NULL, 2, NULL);
  
  

  while(1) {
    vTaskDelay(1000 / portTICK_PERIOD_MS);

  }           

}